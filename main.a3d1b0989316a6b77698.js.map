{"version":3,"sources":["webpack:///./js/constans.js","webpack:///./js/pnotify.js","webpack:///./js/services.js","webpack:///./js/markups.js","webpack:///./js/app.js"],"names":["refs","$resultContainer","document","querySelector","$input","myPnotify","title","error","delay","status","axios","defaults","baseURL","fetchCountries","countryName","get","data","result","items","length","pnotify","response","countryCard","name","capital","population","languages","flag","map","language","join","countryListItem","handleChangeInput","value","target","API","innerHTML","countryMarkup","countries","handleDebounceTyping","debounce","addEventListener"],"mappings":"yJAAaA,EAAO,CAChBC,iBAAkBC,SAASC,cAAc,qBACzCC,OAAQF,SAASC,cAAc,kB,iCCE7BE,G,oBAAY,SAACC,GAAD,OAAWC,gBAAM,CAAED,QAAOE,MAAO,KAAQ,OAY5C,EAVU,kBAAMH,EAAU,2BAU1B,EAJM,SAACI,GAJCJ,EAKR,MAAXI,EAL6B,YAEU,yB,yHCL3CC,IAAMC,SAASC,QAFE,yCAIjB,IAiBe,GAAEC,eAXG,e,EAAA,G,EAAA,yBAAG,WAAOC,GAAP,mHAEQJ,IAAMK,IAAN,IAAcD,GAFtB,uBAEPE,EAFO,EAEPA,KACFC,GATQC,EAScF,GARtBG,QAAU,GAAWD,GAC/BE,IACM,IAGa,kBAIRH,GAJQ,uCAMXG,EAAc,KAAMC,SAASZ,QANlB,kBAOJ,IAPI,kCANF,IAACS,IAMC,mB,+KAAH,uDCbdI,G,8BAAc,SAAC,GAAmD,IAAjDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,KACzD,0DAEiCJ,EAFjC,uMAMwEC,EANxE,mJAUoEC,EAVpE,4KAkBIC,EACCE,KAAI,SAACC,GAAD,yCAAiDA,EAASN,KAA1D,WACJO,KAAK,IApBV,oGAwB0CH,EAxB1C,YAwB0DJ,EAxB1D,uEAgCIQ,EAAkB,SAAC,GAAD,eAAER,KAAF,S,6HC3BlBnB,EAA6BJ,EAA7BI,OAAQH,EAAqBD,EAArBC,iBAEV+B,EAAiB,e,EAAA,G,EAAA,yBAAG,2GAAmBC,EAAnB,EAASC,OAAUD,OAAnB,gCAEKE,EAAItB,eAAeoB,GAFxB,cAEZZ,EAFY,QAGTF,OAAS,IASVD,EATsBG,EAUlCpB,EAAiBmC,WDeTC,WAAqC,KADXC,ECdepB,GDefC,OAAeG,EAAcS,EAC7D,OAAcO,EAAUV,IAAIS,GAAeP,KAAK,IAAhD,UC7BoB,2BAMrBG,IAWDhC,EAAiBmC,UAAY,IAjBP,iCD2BW,IAACE,EAC1BD,EChBInB,IAZU,M,+KAAH,sDASjBqB,EAAuBC,IAASR,EAAmB,KACzD5B,EAAOqC,iBAAiB,QAASF,K","file":"main.a3d1b0989316a6b77698.js","sourcesContent":["export const refs = {\r\n    $resultContainer: document.querySelector('#result-container'),\r\n    $input: document.querySelector('#search-input'),\r\n}","import {error} from '@pnotify/core'\r\nimport '@pnotify/core/dist/PNotify.css'\r\nimport '@pnotify/core/dist/BrightTheme.css'\r\n\r\nconst myPnotify = (title) => error({ title, delay: 2000 }, 200 )\r\n\r\nconst tooManyCountries = () => myPnotify('Too Many Matches Found')\r\n\r\nconst notFound = () => myPnotify('Not Found')\r\n\r\nconst somethingWentWrong = () => myPnotify('Something went wrong')\r\n\r\nconst errorMessage = (status) => {\r\n    status === 404 ? notFound() : somethingWentWrong()\r\n}\r\n\r\nexport default {\r\n    tooManyCountries,\r\n    error: errorMessage,\r\n}\r\n","import axios from 'axios'\r\nimport pnotify from './pnotify'\r\n\r\nconst BASE_URL = 'https://restcountries.eu/rest/v2/name/'\r\n\r\naxios.defaults.baseURL = BASE_URL\r\n\r\nconst formatedData = (items) => {\r\n    if (items.length <= 10) return items\r\n    pnotify.tooManyCountries()\r\n    return[]\r\n}\r\n\r\nconst fetchCountries = async (countryName) => {\r\n    try {\r\n        const { data } = await axios.get(`/${countryName}`)\r\n        const result = formatedData(data)\r\n        return result\r\n        } catch (error) {\r\n            pnotify.error(error.response.status)\r\n            return []\r\n        }\r\n}\r\n\r\nexport default { fetchCountries }","const countryCard = ({ name, capital, population, languages, flag }) => {\r\n    return `\r\n      <li>\r\n        <h2 class=\"country__title\">${name}</h2>\r\n        <div class = \"wrap\">\r\n         <div class = \"country__card\">\r\n           <p class = \"country__card-desc\">\r\n             <strong>Capital:</strong> <span class =\"country__card-value\">${capital}</span>\r\n            </p>\r\n      \r\n      <p class =\"country__card-desc\">\r\n      <strong>Population:</strong> <span class =\"country__card-value\">${population}</span>\r\n      </p>\r\n      \r\n      <p class =\"country__card-desc\">\r\n      <strong>Languages:</strong>\r\n      </p>\r\n      \r\n      <ul class =\"country__card-list\">\r\n      ${languages\r\n        .map((language) => `<li class =\"country__card-item\">${language.name}</li>`)\r\n        .join('')}\r\n  </ul>\r\n  </div>\r\n  <div class=\"country__image\">\r\n  <img class = \"country__image-flag\" src = \"${flag}\" alt = \"${name}\" width = \"300\" height = \"300\" />\r\n  </div>\r\n  </div>\r\n  </li>\r\n  `\r\n}\r\n  \r\n  \r\n  const countryListItem = ({name}) => `<li>${name}</li>`\r\n  \r\n  export const countriesListMarkup = (countries) => {\r\n      const countryMarkup = countries.length === 1 ? countryCard : countryListItem\r\n      return `<ul>${countries.map(countryMarkup).join('')}</ul>`\r\n  }\r\n","import debounce from 'lodash.debounce'\r\n\r\nimport { refs } from './constans'\r\nimport API from './services'\r\nimport { countriesListMarkup } from './markups'\r\n\r\nconst { $input, $resultContainer } = refs\r\n\r\nconst handleChangeInput = async ({ target: { value } }) => {\r\n    if (value) {\r\n        const response = await API.fetchCountries(value)\r\n        response.length > 0 && render(response)\r\n        return\r\n    }\r\n    !value && clearResultContainer()\r\n}\r\n\r\nconst handleDebounceTyping = debounce(handleChangeInput, 500)\r\n$input.addEventListener('input', handleDebounceTyping)\r\n\r\nfunction render(items) {\r\n    $resultContainer.innerHTML = countriesListMarkup(items)\r\n}\r\n\r\nfunction clearResultContainer() {\r\n    $resultContainer.innerHTML = ''\r\n}\r\n"],"sourceRoot":""}